(function(win, doc, uf) {
  var proto     = 'prototype',
      ael       = 'addEventListener',
      n         = null,
	  _s        = 'str',
	  _o        = 'obj',
	  _i        = 'int',
      nn        = 'null',
      u         = 'undef',
	  op        = 'opacity',
	  eo        = {},
      ef        = function(){},
      ua        = win.navigator.userAgent.toLowerCase(),
      newRegExp = '<([A-z]+)>'; 
  var pl = (function() {
    return function(o, context, index) {
      return new pl.fn.init(o, context, index);
    };
  })(); 
  pl.extend = function(Child, Parent) {
    if(!Parent) {
      var Parent = Child,
          Child  = pl;
    }  
    for(var key in Parent) {
      if(Object[proto].__lookupGetter__) {
        var getter = Parent.__lookupGetter__(key),
            setter = Parent.__lookupSetter__(key);     
        if(getter || setter) {
          if(getter) Child.__defineGetter(key, getter);
          if(setter) Child.__defineSetter(key, setter);
          continue;
        }
      }         
      if(!Child[key]) {
        Child[key] = Parent[key];
      }
    }
    return Child;
  }; 
  pl.implement = function(Child, Parent) {
    return pl.extend(Child[proto], Parent);
  };
  pl.extend({
    isArray: Array.isArray || function(o) {
      return Object[proto].toString.call(o) === '[object Array]';
    },   
    type: function(o, is) {
      var types = {
        'function':  'fn',
        'object':    _o,
        'number':    _i,
        'string':    _s,
        'boolean':   'bool',
        'undefined': u
      };
      var iUf = types[typeof o]; 
      if(pl.isArray(o)) {
        iUf = 'arr';
      } else if(o instanceof RegExp) {
        iUf = 'regexp';
      } else if(o instanceof Date || o === +new Date()) {
        iUf = 'date';
      } else if(o === n) {
        iUf = nn;
      }      
      return is ? iUf === is : iUf;
    },       
    empty: function(o) {
      return pl.type(o, nn) || pl.type(o, u) ? true : o.length === 0;
    },   
    trim: function(text) {
      return String[proto].trim ? 
        text.trim() : 
        text.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    },   
    each: function(arr, func) {
      var l   = arr.length,
          key = -1;
      while(++key < l) {
        func.call(arr[key], key, arr[key]);
      }
    },   
    inArray: function(f, arr) {
      if(Array[proto].indexOf) return arr.indexOf(f);
      pl.each(arr, function(k) {
        if(f === this) {
          return k;
        }
      });
      return -1;
    }
  });  
  var _ = {
    a: (function() {
      this.a = [];
      this.b = function(handler) {
        var called = false;   
        function ready() {
          if(called) return;
          called = true;
          handler();
        }    
        if(doc[ael]) {
          _.b.b(doc, 'DOMContentLoaded', ready);
        } else if(doc.attachEvent) {
          if(doc.documentElement.doScroll && win === win.top) {
            function tryScroll() {
              if(called) return;
              if(!doc.body) return;
              try {
                doc.documentElement.doScroll('left');
                ready();
              } catch(e) {
                setTimeout(tryScroll, 0);
              }
            }
            tryScroll();
          }    
          _.b.b(doc, 'readystatechange', function() {
            if(doc.readyState === 'complete') {
              ready();
            }
          });
        }    
        _.b.b(win, 'load', ready);
      };       
      var that = this;        
      return function(handler) {         
        if(!that.a.length) {
          that.b(function() {
            pl.each(that.a, function() {
              this();
            });
          });
        }  
        that.a.push(handler);
      };
    })(),   
    b: (function() {
      var turns = 0;      
      function fixEvt(event) {
        event = event || win.event;        
        if(event.fixed) {
          return event;
        }
        event.fixed = true;        
        event.preventDefault = event.preventDefault || function() {
          this.returnValue = false;
        };    
        event.stopPropagation = event.stopPropagation || function() {
          this.cancelBubble = true;
        };        
        if(!event.target) {
          event.target = event.srcElement;
        }        
        if(!event.which && event.button) {
          event.which = (event.button & 1 ? 
            1 : 
            (event.button & 2 ? 
              3 : 
              (event.button & 4 ? 2 : 0)
            )
          );
        }        
        return event;
      }      
      function handleCommon(e) {
        e = fixEvt(e);        
        var handlerList = this.evt[e.type];        
        for(var key in handlerList) {
          var updated = handlerList[key].call(this, e);         
          if(!updated) {
            e.preventDefault();
            e.stopPropagation();
          }
        }
      }      
      return {
        b: function(el, evt, fn) {
          if(pl.browser('ie') && el.setInterval && el !== win) {
            el = win;
          }          
          if(!fn.turnID) {
            fn.turnID = ++turns;
          }          
          if(!el.evt) {
            el.evt = eo;            
            el.handleEvt = function(e) {
              if(!pl.type(_.b, u)) {
                return handleCommon.call(el, e);
              }
            };
          }          
          if(!el.evt[evt]) {
            el.evt[evt] = eo;           
            if(el[ael]) {
              el[ael](evt, el.handleEvt, false);
            } else {
              el.attachEvent('on' + evt, el.handleEvt);
            }
          }          
          el.evt[evt][fn.turnID] = fn;
        },        
        a: function(el, evt, fn) {
          var handlerList = el.evt && el.evt[evt];
          if(!handlerList) return;          
          delete handlerList[fn.turnID];          
          for(var key in handlerList) return;          
          if(el.removeEventListener) {
            el.removeEventListener(evt, el.handleEvt, false);
          } else {
            el.detachEvent('on' + evt, el.handleEvt);
          }          
          delete el.evt[evt];         
          for(var key in el.evt) return;          
          try {
            delete el.handleEvt;
            delete el.evt;
          } catch(e) {
            pl(el).removeAttr('handleEvt').removeAttr('evt');
          }
        }
      };
    })(),        
    c: function(evt, fn, flag) {
      if(fn) {
        if(flag) {
          pl.each(__.el, function() {
            _.b.b(this, evt, fn);
          });
        } else {
          pl.each(__.el, function() {
            _.b.a(this, evt, fn);
          });
        }          
      } else {
        for(var key in evt) {
          arguments.callee(key, evt[key], flag);
        }
      }
      return __;
    }
  };
  var i = function(e, method, ins, to) {
    var init = e;
    var e = init.el[0];
    if(!ins) {
      return e[method];
    } else {
      if(!to) {
        e[method] = ins;
      } else {
        switch(to) {
          case 1:
            pl.each(init.el, function() {
              this[method] += ins;
            });
            break;
          case -1:
            pl.each(init.el, function() {
              this[method] = ins + this[method];
            });
            break;
        }
      }
      return init;
    }
  };  
  var r = function(o, params) {
    var ns = doc.createElement(o);
    return params ? pl.extend(ns, params) : ns;
  };  
  var c = {
    b: function(str) {
      return str.replace(/-\D/g, function(match) {
        return match[1].toUpperCase();
      });
    },    
    a: function(val) {
      var fixed = [op, val];
      switch(pl.browser()) {
        case 'ie7':
          fixed[0] = 'filter';
          fixed[1] = 'alpha(' + op + '=' + (val * 100) + ');';
          break;
        case 'ie8':
          fixed[0] = '-ms-filter';
          fixed[1] = 'alpha(' + op + '=' + (val * 100) + ')';
          break;
        case 'safari_khtml':
          fixed[0] = '-khtml-' + op;
          break;
        case 'firefox':
          fixed[0] = '-moz-' + op;
          break;
      }
      
      return fixed;
    },    
    f: function(val) {
      return val ? 
        (val.match(op + '=') ? val.match('=([0-9]+)')[1] / 100 : val) : 
        n;
    },   
    c: {
      zIndex: true, 
      fontWeight: true, 
      opacity: true, 
      zoom: true, 
      lineHeight: true
    },   
    get: function(o, style) {
      if(style === op) {
        var fixed = c.a(0),
            style = fixed[0];
      }
      return c.f(
        o.currentStyle ? o.currentStyle[style] : 
          win.getComputedStyle(o, n).getPropertyValue(style)
      );
    }
  };    
  var d = {
    'htmlFor':   'for',
    'className': 'class',
    'cssFloat':  'float'
  };  
  var __;
  pl.extend({fn: eo});
  pl.extend(pl.fn, {
    init: (function() {
      return function(o, params, index) {
        if(o === 'body' && !params) {
          this.el = [doc.body];
          return this;
        }        
        var int='';
        switch(pl.type(o)) {
          case _s:
            var ne = o.match(newRegExp);
            if(ne) {
              int = [r(ne[1], params)];
            } else {
              switch(pl.type(params)) {
                case _s:
                  switch(pl.type(index)) {
                    case _i:
                      int = [yass(params + ' ' + o)[index]];
                      break;
                    default:
                    case u:
                      int = yass(params + ' ' + o);
                      break;
                  }
                  break;
                case _i:
                  int = [yass(o)[params]];
                  break;
                default:
                case u:
                  int = yass(o);
                  break;
              }
            }
            break;
          case 'fn':
            _.ready(o);
            break; 
          case _o:
            int = [o];
            break;
        }                
        this.el = int;
        __ = this;
        return this;
      };
    })(),    
    len: function() {
      return this.el.length;
    },       
    html: function(ins, to) {
      return i(this, 'innerHTML', ins, to);
    },   
    text: function(ins, to) {
      var method = 
        this.el[0].textContent ? 'textContent' : 'innerText';
      return i(this, method, ins, to);
    },    
    get: function(index) {
      var e = this.el;
      return e.length === 1 ? e[0] : (index !== u ? e[index] : e);
    },    
    parent: function(step) {
      if(!step) var step = 1;
      var stepCount = function(elem, step) {
        if(step > 0) {
          --step;
          return stepCount(elem.parentNode, step);
        }
        return elem;
      };
      return stepCount(this.el[0], step);
    },    
    remove: function() {
      pl.each(this.el, function() {
        this.parentNode.removeChild(this);
      });
      return this;
    },    
    addClass: function(c) {
      pl.each(this.el, function() {
        var cl = this.className;
        if(pl.inArray(c, cl.split(' ')) !== -1) return;
        this.className += (cl ? ' ' : '') + c;
      });
      return this;
    },   
    hasClass: function(c) {
      return pl.inArray(c, this.el[0].className.split(' ')) !== -1;
    },   
    removeClass: function(c) {
      pl.each(this.el, function() {
        var cl = this.className.split(' ');
        
        if(pl.inArray(c, cl) === -1) return;
        
        var from = pl.inArray(c, cl);
        cl.splice(from, 1);

        if(pl.empty(cl)) {
          this.removeAttribute('class');
        } else {
          this.className = cl.join(' ');
        }
      });
      return this;
    },   
    attr: function(attr, set) {
      var attr = d[attr] || attr;

      if(set) {
        pl.each(this.el, function() {
          if(attr === 'class') {
            pl(this).addClass(set);
          } else {
            this.setAttribute(attr, set);
          }
        });
      } else {
        switch(pl.type(attr)) {
          case _o:
            for(var key in attr) {
              arguments.callee.call(this, key, attr[key]);
            }
            break;
          case _s:
            return this.el[0].getAttribute(attr);
            break;
        }
      }
      return this;
    },   
    removeAttr: function(attr){
      pl.each(this.el, function() {
        this.removeAttribute(attr);
      });
    },
    css: function(style, set) {
      if(set) {
        var style = c.b(style);        
        if(pl.type(set, _i) && !c.c[style]) {
          set += 'px';
        } else if(style === op) {
          var fixed = c.a(set),
              style = fixed[0],
              set   = fixed[1];
        }      
        pl.each(this.el, function() {
          this.style[style] = set;
        });
      } else {
        switch(pl.type(style)) {
          case _o:
            for(var key in style) {
              arguments.callee.call(this, key, style[key]);
            }
            break;
          case _s:
            return c.get(this.el[0], style);
            break;
        }
      }
      return this;
    },
    each: function(fn) {
      pl.each(this.el, function() {
        if(this !== win) {
          fn.call(this);
        }
      });
      return this;
    },    
    bind: function(evt, fn) {
      return _.c(evt, fn, 1);
    },    
    unbind: function(evt, fn) {
      return _.c(evt, fn, 0);
    },   
    show: function() {
      pl.each(this.el, function() {
        if(pl(this).css('display') !== 'none') return;
        
        var realDisplay = pl(this).attr('plrd');
        if(realDisplay === u) return;
        
        pl(this).css('display', realDisplay || '');
      });
      return this;
    },    
    hide: function() {
      pl.each(this.el, function() {
        if(!pl(this).attr('plrd')) {
          pl(this).attr('plrd', pl(this).css('display'));
        }
        pl(this).css('display', 'none');
      });
      return this;
    },   
    after: function(o) {
      return a.call(this, o, 'midst', 'nextSibling');
    },   
    before: function(o) {
      return a.call(this, o, 'midst');
    },   
    append: function(o) {
      return a.call(this, o, 'edge', 1);
    },    
    prepend: function(o) {
      return a.call(this, o, 'edge', -1);
    }
  });
  var a = function(o, destination, to) {
    switch(destination) {
      case 'edge':
        if(pl.type(o, _s)) {
          pl.each(this.el, function() {
            pl(this).html(o, to);
          });   
        } else {      
          pl.each(this.el, function() {
            this.insertBefore(
              o, to === 1 ? this.lastChild.nextSibling : this.firstChild
            );
          });
        }
        break;     
      case 'midst':
        if(pl.type(o, _s)) {         
          pl.each(this.el, function() {
            var el = pl('<div>').html(o).get();
            var children = el.childNodes;
            var key = children.length;          
            while(0 <= --key) {
              this.parentNode.insertBefore(
                children[key], to ? this[to] : this
              );
            }
          });
        } else {
          pl.each(this.el, function() {
            this.parentNode.insertBefore(o, to ? this[to] : this);
          });
        }
        break;
    }
    return this;
  };
  pl.extend({
    toParams: function(o) {
      if(!(o instanceof Object)) return o;      
      var pieces = [];
      for(var key in o) {
        pieces.push(
          encodeURIComponent(key) + '=' + encodeURIComponent(o[key])
        );
      }
      return pieces.join('&');
    },   
    JSON: function(data) {
      return (!(/[^,:eo[]0-9.-+Eaeflnr-u nrt]/.test(
        data.replace(/"(.|[^"])*"/g, ''))) && eval('(' + data + ')')
      );
    },  
    browser: function(name) {
      var isOpera  = /opera/i.test(ua),
          isChrome = /chrome/i.test(ua);
      var browser = {
        opera: isOpera,
        ie: !isOpera && /msie/i.test(ua),
        ie6: !isOpera && /msie 6/i.test(ua),
        ie7: !isOpera && /msie 7/i.test(ua),
        ie8: !isOpera && /msie 8/i.test(ua),
        firefox: /firefox/i.test(ua),
        chrome: isChrome,
        safari_khtml: !isChrome && /khtml/i.test(ua),
        safari: !isChrome && /webkit|safari/i.test(ua)
      };

      for(var key in browser) {
        if(browser[key]) {
          return name === key || key;
        }
      }
    },        
    ajax: function(params) {
      var Request,
          load    = params.load || ef,
          error   = params.error || ef,
          success = params.success || ef;            
      var requestPrepare = function() {
        if(win.XMLHttpRequest) {
          Request = new XMLHttpRequest();
          
          if(Request.overrideMimeType) {
            Request.overrideMimeType('text/html');
          }
        } else if(win.ActiveXObject) {
          try {
            Request = new ActiveXObject('Msxml2.XMLHTTP');
          } catch(e) {
            try {
              Request = new ActiveXObject('Microsoft.XMLHTTP');
            } catch(er) {}
          }
        }        
        if(!Request) {
          return alert('Ajax fatal error.');
        }        
        _.b.b(Request, 'readystatechange', function(e) {
          switch(Request.readyState) {
            case 1: load();
              break;
            case 4:
              if(Request.status === 200) {
                success(
                  params.dataType === 'json' ? 
                    pl.JSON(Request.responseText) : 
                    Request.responseText
                );
              } else {
                error(Request.status);
              }
              break;
          }
        });
      };      
      var headers = function(type) {
        Request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');        
        if(type) {
          Request.setRequestHeader(
            'Content-type', 
            'application/x-www-form-urlencoded; charset=' + 
            (params.charset || 'utf-8')
          );
        }
      };   
      params.type  = params.type || 'POST';
      params.data  = pl.toParams(params.data || eo);
      params.async = params.async || true;    
      requestPrepare();   
      switch(params.type) {
        case 'POST':
          Request.open('POST', params.url, params.async);
          headers(1);
          Request.send(params.data);
          break;
        case 'GET':
          Request.open('GET', params.url + '?' + params.data, params.async);
          headers(0);
          Request.send(n);
          break;
      }
    }
  });   
  pl.implement(pl.fn.init, pl.fn);
  win.pl = win.prevel = pl;
})(this, document);
function yass(o){return document.querySelectorAll(o);}